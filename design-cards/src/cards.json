{
    "colors": {
        "simple": {
            "background": "#003917",
            "line": "#aaffcc",
            "title": "#ffffff",
            "qr": "#ffffff"
        },
        "powerful": {
            "background": "#003917",
            "line": "#aaffcc",
            "title": "#ffffff",
            "qr": "#ffffff"
        },
        "abstract": {
            "background": "#162d50",
            "line": "#8ba7d9",
            "title": "#ffffff",
            "qr": "#ffffff"
        },
        "concrete": {
            "background": "#162d50",
            "line": "#8ba7d9",
            "title": "#ffffff",
            "qr": "#ffffff"
        },
        "pragmatic": {
            "background": "#900000",
            "line": "#f4d7d7",
            "title": "#ffffff",
            "qr": "#ffffff"
        },
        "idealistic": {
            "background": "#900000",
            "line": "#f4d7d7",
            "title": "#ffffff",
            "qr": "#ffffff"
        },
        "robust": {
            "background": "#f0c873",
            "line": "#784421",
            "title": "#000000",
            "qr": "#784421"
        },
        "technologic": {
            "background": "#f0c873",
            "line": "#784421",
            "title": "#000000",
            "qr": "#784421"
        },
        "question": {
            "background": "#ff9955",
            "line": "#784421",
            "title": "#000000",
            "qr": "#784421",
            "symbol": "?"
        },
        "action": {
            "background": "#ff9955",
            "line": "#784421",
            "title": "#000000",
            "qr": "#784421",
            "symbol": "!"
        }
    },
    "cards": [
        {
            "abbreviation": "KISS",
            "name": "Keep It Simple Stupid",
            "short": "Simple means readable, maintainable, and less error-prone. Overengineering is harmful.",
            "long": "Complex code typically contains more bugs and it has to be maintained (maybe even by other people). To others it may seem obscure which can lead to frustration and bad code quality. Striving for simplicity means to avoid having large methods/classes, many methods/classes/parameters, as well as inheritance, low-level optimization, complex algorithms, fancy (lan-guage) features, configurability, etc.",
            "links": "↑CF, ↓RoP, ↓NFR, ↓LC",
            "set": "basic",
            "shield": "simple"
        },
        {
            "abbreviation": "RoE",
            "name": "Rule of Explicitness",
            "short": "Explicit solutions are less error-prone and easier to understand and debug.",
            "long": "Implicit solutions require the developer to have a deeper understanding of the module, as it is necessary to “read between the lines”. Explicit solutions are less error-prone and easier to maintain. So better avoid configurability, unnecessary abstractions and indirection (events, listeners, observers, etc.).",
            "links": "↑KISS, ↓LC, ↓RoP, ⇅FP",
            "set": "advanced",
            "shield": "simple"
        },
        {
            "abbreviation": "YAGNI",
            "name": "You Ain't Gonna Need It",
            "short": "It's currently not necessary and we even have to maintain it!",
            "long": "Code needs to be maintained. The more you have, the more complexity there will be. Adding features and capabilities that are not used (yet), wastes time twice: When you write the code and when you change or just read it. This becomes even more painful when you finally try to re-move this dead code. So avoid runtime-configu-ration, premature optimization, and features that are only there “for the sake of complete-ness”. If they are needed, add them later.",
            "links": "↑CF, ↓PSPG, ↓TP, ⇅FP",
            "set": "advanced",
            "shield": "simple"
        },
        {
            "abbreviation": "EUHM",
            "name": "Easy to Use and Hard to Misuse",
            "short": "It shouldn't require much discipline or special knowledge to use or extend that module.",
            "long": "Some day there will be a new colleague who hasn’t read the docs. Some day it will be Friday evening right before the deadline. No matter how disciplined or smart you are, some day somebody will cut corners. So better have the obvious way of usage be the correct one. Have the compiler or the unit tests fail in case of errors and keep sure that changing a module does not require much understanding.",
            "links": "↑ML, ↑PSU, ↑UP, ⇅KISS",
            "set": "advanced",
            "shield": "simple"
        },
        {
            "abbreviation": "RoP",
            "name": "Rule of Power",
            "short": "Foresighted, generic solutions are reusable and future requirements will be addressed, too.",
            "long": "A powerful solution is better than a less potent one. Foresighted solutions reduce the necessity of refactoring and are more stable over time. Generic solutions often need less code and additionally offer extensibility by design. So better use abstractions, indirection, GoF patterns, polymorphism, etc.",
            "links": "↑FP, ↑DRY, ↓YAGNI, ↓CF",
            "set": "basic",
            "shield": "powerful"
        },
        {
            "abbreviation": "FP",
            "name": "Flexibility Principle",
            "short": "We have to make sure that we can change that later on.",
            "long": "While it is often not necessary to implement a fully generic solution, in many cases it is important to be flexible. Even if a generic solution isn't implemented right away, it must still be possible to do so. E.g. if you don't want to implement runtime-configurability, at least have a constant ready to be made configurable. Make sure that the solution does not spoil or hinder future changes or enhancements.",
            "links": "↑RoP, ↑LC, ↑ML, ↓ICC",
            "set": "advanced",
            "shield": "powerful"
        },
        {
            "abbreviation": "NFR",
            "name": "Non-Functional Requirements",
            "short": "We have to think about NFRs now. Adding these qualities later will be very hard.",
            "long": "Software needs to be efficient, scalable, secure, usable, maintainable, testable, resilient, reli-able, compliant with (data privacy) regulations, etc. These qualities have a huge impact on the architecture. You might need to choose certain technologies for performance, use microser-vices for scalability, or provide redundant sub-systems for reliability. Thinking about this later results in waste and additional cost/effort.",
            "links": "↑ML, ↓YAGNI, ↓KISS, ⇅FP",
            "set": "advanced",
            "shield": "powerful"
        },
        {
            "abbreviation": "ECV",
            "name": "Encapsulate the Concept that Varies",
            "short": "Changing parts of the software should get their own module or even their own abstraction.",
            "long": "If you have to change your software, you’d like those changes to be isolated, so you don’t have to change half your system. So put the chang-ing parts into separate modules. Isolate chang-ing APIs via gateway classes, data access tech-nology using DAOs, encapsulate algorithms using the strategy pattern, etc. Conversely don’t use abstractions for those parts that won’t change.",
            "links": "↑RoP, ↑IH/E, ↓YAGNI, ↓RoE",
            "set": "advanced",
            "shield": "powerful"
        },
        {
            "abbreviation": "LC",
            "name": "Low Coupling",
            "short": "Tight coupling creates ripple-effects and makes the code less maintainable.",
            "long": "If you decouple, you don't need to know internal details about other parts of the system. Furthermore it makes you independent from changes in those other parts and maybe even supports reuse. So better reduce the number of dependencies and assumptions about other modules, use narrow interfaces, additional layers, indirection, dependency injection, observers, messaging, etc.",
            "links": "↑FP, ↑ML, ↓KISS, ⇅SRP",
            "set": "basic",
            "shield": "abstract"
        },
        {
            "abbreviation": "SRP",
            "name": "Single Responsibility Principle",
            "short": "One module should do one thing only.",
            "long": "If there is more than one reason to change a certain module (method/class/artifact/...), i.e. the module has more than one responsibility, then code becomes fragile. Changing one responsibility may result in involuntary changes to the other. Furthermore changing the module is more difficult and takes more time. And even when you don't change the module at all, understanding it is more complex. So better separate concerns into separate modules.",
            "links": "↑PSU, ↑IOSP, ⇅LC, ⇅KISS",
            "set": "advanced",
            "shield": "abstract"
        },
        {
            "abbreviation": "ADP",
            "name": "Acyclic Dependencies Principle",
            "short": "Cyclic dependencies create rigid structures.",
            "long": "Cyclic dependencies result in all sorts of nasty consequences: tight couplings, deadlocks, infinite recursions, ripple effects, bad maintainability, etc. The larger the cycle, the worse the consequences will get and the harder they are to understand and to break apart. So avoid them by using dependency inversion, publish-subscribe mechanisms or just by assigning responsibilities to modules in a hierarchical way.",
            "links": "↑LC, ↑ML, ↓RoE, ↓ICC",
            "set": "advanced",
            "shield": "abstract"
        },
        {
            "abbreviation": "IOSP",
            "name": "Integration Operation Segregation Principle",
            "short": "A module should not contain API calls or business logic and integrate other modules.",
            "long": "Either a module is an operation, i.e. it contains business logic and/or API calls or it is an inte-gration, i.e. it calls other modules. That means operations should never call other modules and integrations should have no business logic and no API calls. Operations are easy to read, test, and reuse. Integrations are also simple as they just call other modules. This ensures that mod-ules are small and the system is well structured.",
            "links": "↑LC, ↑SRP, ⇅KISS, ⇅PSU",
            "set": "advanced",
            "shield": "abstract"
        },
        {
            "abbreviation": "DRY",
            "name": "Don't Repeat Yourself",
            "short": "Duplication makes changing the code cumbersome and leads to bugs.",
            "long": "Having a functionality more than once means to update or bugfix it at every occurrence which is more error-prone and more effort. Refactorings like method or class extraction may help as well as inheritance, polymorphism and some design patterns.",
            "links": "↑RoP, ↑PoQ, ↓KISS, ↓PSU",
            "set": "basic",
            "shield": "concrete"
        },
        {
            "abbreviation": "IH/E",
            "name": "Information Hiding/Encapsulation",
            "short": "Only what is hidden, can be changed without risk.",
            "long": "There are 3 levels of IH/E: 1) Having a capsule means, that you have methods for accessing the data of the module. 2) Making the capsule opaque means that you can only access the data through the methods (i.e. all fields are private). 3) Making the capsule impenetrable means that you avoid returning references to mutable internal data structures. Either you make them immutable or you create copies in getter/setter methods.",
            "links": "↑MP, ↑LC, ↑FP, ⇅ KISS",
            "set": "advanced",
            "shield": "concrete"
        },
        {
            "abbreviation": "PSU",
            "name": "Principle of Separate Understandability",
            "short": "You shouldn't need to know the other parts for understanding this one.",
            "long": "Each method, class, artifact, service, etc. should be understandable on its own. Understanding becomes a lot more difficult if you cannot apply divide and conquer. Furthermore if something is not separately understandable, this typically means either that a part of the functionality does not belong here or the module has the wrong abstraction.",
            "links": "↑LC, ↑MP, ↑ML, ⇅TdA/IE",
            "set": "advanced",
            "shield": "concrete"
        },
        {
            "abbreviation": "TdA/IE",
            "name": "Tell don't Ask/Information Expert",
            "short": "Functionality should be where the data is.",
            "long": "Instead of asking a module for data, processing it, and putting it back afterwards, better just delegate. This reduces complexity in those classes which are already large. So avoid get-ters and setters in favor of methods containing domain logic. In other words: Logic should be implemented in that module that already has the necessary data, that is the information expert.",
            "links": "↑IH/E, ↓PSU, ⇅SRP, ⇅LC",
            "set": "advanced",
            "shield": "concrete"
        },
        {
            "abbreviation": "CF",
            "name": "Customer Focus",
            "short": "This is not what the customer pays us for!",
            "long": "If something is not requested, there has to be a very good reason to do it. Anything in addition costs additional time (also for removing or maintaining it). It creates additional risk of more bugs and makes you responsible for it. Continuously remember what was requested e.g. by looking into the requirements or asking the customer.",
            "links": "↓KISS, ↑DRY, ↑FP, ↓RoE",
            "set": "basic",
            "shield": "pragmatic"
        },
        {
            "abbreviation": "ICC",
            "name": "In the Concrete Case",
            "short": "Your arguments are valid but in the concrete case the advantages won’t be important.",
            "long": "Many arguments hold true in general but when we look at the decision to be made, the effects they describe are sometimes negligible. Yes, low coupling is important, uniformity is helpful, and flexibility is desirable. But these aspects are sometimes crucial and sometimes irrele-vant. So better focus on arguments that are rel-evant in the concrete case instead of insisting on aspects just to satisfy idealistic pettiness.",
            "links": "↑CF, ↑YAGNI, ↓PoQ, ↓PSPG",
            "set": "advanced",
            "shield": "pragmatic"
        },
        {
            "abbreviation": "PoQ",
            "name": "Principle of Quality",
            "short": "Bad quality kills us in the long run!",
            "long": "It may be faster now but we need to be fast tomorrow, too. Bad quality frustrates maintainers, makes fixing bugs harder and leads to huge efforts for changes. This often starts by being careless once. Don't let a vicious circle begin. Use metrics, adhere to the architecture, have a high test coverage, apply code reviews and continuous refactoring. Don't be lazy.",
            "links": "↓KISS, ↑DRY, ↑FP, ↓RoE",
            "set": "basic",
            "shield": "idealistic"
        },
        {
            "abbreviation": "MP",
            "name": "Model Principle",
            "short": "Program close to the problem domain.",
            "long": "Software should model and mirror the concepts and actions of the real world. So avoid every-thing that works “accidentally”. If it works acci-dentally, it breaks accidentally. So be precise with semantics. If you need to delete an order in a data migration routine, call deleteOrder and not cancelOrder—even if that does current-ly the same. cancelOrder might get enhanced such that it creates a reverse order which would'n be correct for data migration anymore.",
            "links": "↑PoQ, ↑EaO, ↑FRD, ↓CF",
            "set": "advanced",
            "shield": "idealistic"
        },
        {
            "abbreviation": "PSPG",
            "name": "A Penny Saved Is a Penny Got",
            "short": "It might not be a big advantage, but it's not a big cost either.",
            "long": "Making little improvements a habit sums up to a big advantage. This is the reason behind the boy scout rule (“Leave the campground cleaner than you’ve found it”). You don’t have to clean the whole forest but if everyone leaves the campground just a little bit cleaner, we will have a clean forest in the end. So if it’s not a big deal, update libraries, improve documenta-tion, and refactor the classes you are currently touching anyway.",
            "links": "↑PoQ, ↑EaO, ↑FRD, ↓CF",
            "set": "advanced",
            "shield": "idealistic"
        },
        {
            "abbreviation": "ML",
            "name": "Murphy's Law",
            "short": "Avoid possibilities for something to go wrong or to get misused.",
            "long": "If there is a possibility for something to be used in the wrong way (like supplying parameters in the wrong order), it will eventually happen. So better avoid possible future bugs by using defensive programming, immutability, a common naming scheme, avoiding duplication and complexity.",
            "links": "↓KISS, ↑DRY, ↑FP, ↓RoE",
            "set": "basic",
            "shield": "robust"
        },
        {
            "abbreviation": "FF",
            "name": "Fail fast",
            "short": "Program defensively or you'll have a hard time debugging.",
            "long": "If you don't check your inputs, cascading fail-ures can occur. This results in security prob-lems and error messages which are hard to de-cipher because they are not thrown at the posi-tion of the actual fault. This may even lead to situations where teams have to investigate fail-ures which are not theirs. So log and throw an error as soon as you realize a problem. The earlier the better, so throwing a compile-time error is preferable to run-time checks.",
            "links": "↑ML, ↑EUHM, ↓KISS, ↓NFR",
            "set": "advanced",
            "shield": "robust"
        },
        {
            "abbreviation": "RoS",
            "name": "Rule of Standardization",
            "short": "Adhering to standards makes systems easier to understand and reduces bugs.",
            "long": "Sticking to standards reduces complexity. If you are familiar with the standard, understanding systems that adhere to it will be much easier. Also standards ensure a certain degree of inter-operability and maturity. So use standard tech-nologies, standard architectures, standard cod-ing styles, standard formatting, standardized checklists, etc. If there are no formal standards, create your own in-house standard.",
            "links": "↑DRW, ↑NFR, ⇅KISS, ⇅TP",
            "set": "advanced",
            "shield": "robust"
        },
        {
            "abbreviation": "TP",
            "name": "Technological Progress",
            "short": "Progress must not be ignored in a competitive environment.",
            "long": "New technology is not only motivating but also comes with benefits like more features, more performance, better maintainability, and fixed bugs. Furthermore old technology won't be supported for much longer and new people don't know the old stuff anymore. Continuously challenge existing solutions by evaluating alternatives.",
            "links": "↓KISS, ↑DRY, ↑FP, ↓RoE",
            "set": "basic",
            "shield": "technologic"
        },
        {
            "abbreviation": "DRW",
            "name": "Don't Re-Invent the Wheel",
            "short": "Focus on real challenges instead of old ones.",
            "long": "If something has already been solved, it's prob-ably solved in a better way than we will manage to do in the time we have. No one would ever reimplement a cache or a search algorithm ex-cept it is one's core competency. So focus on the challenges of your core business and use standards, libraries, and frameworks. They are the core business of those people who create and maintain them. They've solved many prob-lems that we haven't even thought of, yet.",
            "links": "↑EbE, ↓LC, ⇅RoS, ⇅KISS",
            "set": "advanced",
            "shield": "technologic"
        },
        {
            "abbreviation": "EbE",
            "name": "Experience by Experiments",
            "short": "We'll never know if we don't try!",
            "long": "Discussing advantages and disadvantages theo-retically can be helpful but at a certain point you will never know which variant is better if you don’t try. So if you have a standard-solution to a problem, try the other one. Carefully but regularly try out new frameworks and libraries, new coding guidelines, design patterns etc. in real-world projects. Failed experiments will be refactored and successful experiments will stay and become the new standard.",
            "links": "↑TP, ↓IR, ↓CF, ⇅FP",
            "set": "advanced",
            "shield": "technologic"
        },
        {
            "abbreviation": "qTRT",
            "name": "The Right Time",
            "short": "What will happen if we don't decide right now?",
            "long": "A design decision should be taken as late in the project as possible. But it's likewise harmful to take it too late. In order to find out if a decision really needs to be made now, think about what will happen, if the decision is deferred.",
            "links": "",
            "set": "basic",
            "shield": "question"
        },
        {
            "abbreviation": "aMed",
            "name": "Mediator",
            "short": "We cannot agree.  Let's get some help!",
            "long": "Sometimes a discussion gets stuck. In these cases it is often advisable to ask another colleague for an opinion or mediation. Usually a colleague who hasn't already participated in the discussion, adds a new, unbiased perspective.",
            "links": "",
            "set": "basic",
            "shield": "action"
        },
        {
            "abbreviation": "aRes",
            "name": "Research",
            "short": "Let’s have a look if there is already a suitable solution.",
            "long": "When making a decision, make sure that you know all relevant solutions. Many problems have already been solved. So before inventing an own algorithm, have a look at libraries and scientific papers. For certain design decisions have a look at standards and patterns. Also con-sider researching code snippets for common programming issues. Maybe there is even commercial-off-the-shelf (COTS) or open-source software you can leverage.",
            "links": "",
            "set": "advanced",
            "shield": "action"
        },
        {
            "abbreviation": "aDA",
            "name": "Devil’s Advocate",
            "short": "There is no real discussion and we risk missing a point. Let's appoint a devil’s advocate.",
            "long": "Sometimes you agree too fast on a solution—probably because you all have a similar way of thinking. In such a case you can appoint some-one who has to argue against that solution. A similar problem occurs when none of you has a strong tendency towards any of the solutions. In such a case, for each solution appoint a rep-resentative who tries to argument for this and against the other solutions.",
            "links": "",
            "set": "advanced",
            "shield": "action"
        },
        {
            "abbreviation": "aPO",
            "name": "Product Owner Decides",
            "short": "This has a significant impact on the business so we have to talk with the product owner.",
            "long": "Some technical decisions influence the product itself. Often there is an impact on cost and time and sometimes there are even legal issues. Trade-offs include hosting an application in the cloud (flexibility and time vs. privacy and cost), adding a caching layer (performance vs. com-plexity and cost), make-or-buy (time vs. flexibi-lity and cost), etc. In those cases the decision is not merely a technical one. Involve the PO.",
            "links": "",
            "set": "advanced",
            "shield": "action"
        },
        {
            "abbreviation": "aCD",
            "name": "Client Decides",
            "short": "The client who calls the API knows best how the ideal API should look like.",
            "long": "APIs need to be intuitive to those who use it and sometimes it's hard to predict if that's the case. Some decisions have an impact on how a module can be used. Some use cases may get simpler and others may get harder and less intuitive. Better stop assuming you know what's best for the clients. Just ask and involve them in your decision.",
            "links": "",
            "set": "advanced",
            "shield": "action"
        }
    ]
}

